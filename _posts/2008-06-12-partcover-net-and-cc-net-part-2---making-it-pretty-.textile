---
layout: post
title: PartCover.Net and CC.Net Part 2 - Making it pretty.
summary: In my previous post I show how to integrate PartCover reports into CC.Net and promise to look into make the reports look a bit nicer and try to integrate the Coverage metrics into the statistics reports. So I dust off my xslt, pick up two of my f...
---
In my previous post I show how to integrate PartCover reports into CC.Net and promise to look into make the reports look a bit nicer and try to integrate the Coverage metrics into the statistics reports. So I dust off my xslt, pick up two of my favorite books on XML (XML Hacks and XML for the world wide web) open PSPad and started to play around until I got something that I like.<a href="images/posts/partcoverccnetxsl.zip" title="Click here to download the stylesheets." target="_blank">Click here to download the stylesheets.</a> <h3>The summary report</h3>The for the summary I want to show a coverage percentage per each assembly in the project so I based my xsl in the assembly.report.xslt provided with PartCover.First I changed the table tag and the first row from this:<br>&amp;lt;table style="border-collapse: collapse;"&amp;gt;···&amp;lt;tr style="font-weight:bold; background:whitesmoke;"&amp;gt;<br>&amp;lt;td colspan="2"&amp;gt;Coverage by assembly&amp;lt;/td&amp;gt;<br>&amp;lt;/tr&amp;gt;To:&amp;lt;table width="98%" cellspacing="0" cellpadding="2" border="0" class="section-table"&amp;gt;<br>&amp;lt;tr class="sectionheader"&amp;gt;<br>&amp;lt;td colspan="2"&amp;gt;Coverage by assembly&amp;lt;/td&amp;gt;<br>&amp;lt;/tr&amp;gt;<br><br>Then I modified the colours used to identify the different percentage of coverages and made the fonts bold.<br><br><i>Note: I made move all the styles into a stylesheet later on, for now some stuff is hardcoded in the xsl file, what I don't particulary like. When possible I used pre-defined classes already available in the existing cc.net css files</i><br><br><br>&amp;lt;xsl:variable name="cov0style" select="'background:#ff0000;text-align:right;font-weight:bold;'"/&amp;gt;<br>&amp;lt;xsl:variable name="cov20style" select="'background:#ff6600;text-align:right;font-weight:bold;'"/&amp;gt;<br>&amp;lt;xsl:variable name="cov40style" select="'background:#ffcc00;text-align:right;font-weight:bold;'"/&amp;gt;<br>&amp;lt;xsl:variable name="cov60style" select="'background:#cc9933;text-align:right;font-weight:bold;'"/&amp;gt;<br>&amp;lt;xsl:variable name="cov80style" select="'background:#6699ff;text-align:right;font-weight:bold;'"/&amp;gt;<br>&amp;lt;xsl:variable name="cov100style" select="'background:#00cc00;text-align:right;font-weight:bold;'"/&amp;gt;<br><br>Then I added this lines of code to alternate the style for each row in the summary.<br><br>&amp;lt;xsl:if test="position() mod 2 = 0"&amp;gt;&amp;lt;xsl:attribute name="class"&amp;gt;section-oddrow&amp;lt;/xsl:attribute&amp;gt;&amp;lt;/xsl:if&amp;gt;<br><br>This code needs to be added after opening the table row &amp;lt;tr&amp;gt; inside the for-each loop and before creating the td element or you will have an error on runtime when the server tries to generated the report.I also decided to modify the colour used for 0% coverage, in the original stylesheet it used the same colour for coverage between 0 and 20 percent.I wanted to use a bright red for assemblies with no coverage, so I added the following line after we calculate the coverage percentage.<br><br>&amp;lt;xsl:if test="$coverage = 0"&amp;gt; &amp;lt;xsl:attribute name="style"&amp;gt; &amp;lt;xsl:value-of select="$cov0style"/&amp;gt; &amp;lt;/xsl:attribute&amp;gt; &amp;lt;/xsl:if&amp;gt;<br><br>And I modified this line:<br> &amp;lt;xsl:if test="$coverage &amp;gt;=  0 and $coverage &amp;lt; 20"&amp;gt; &amp;lt;xsl:attribute name="style"&amp;gt; &amp;lt;xsl:value-of select="$cov20style"/&amp;gt; &amp;lt;/xsl:attribute&amp;gt; &amp;lt;/xsl:if&amp;gt;<br><br>to look like this:<br><br>&amp;lt;xsl:if test="$coverage &amp;gt; 0 and $coverage &amp;lt; 20"&amp;gt; &amp;lt;xsl:attribute name="style"&amp;gt; &amp;lt;xsl:value-of select="$cov20style"/&amp;gt; &amp;lt;/xsl:attribute&amp;gt; &amp;lt;/xsl:if&amp;gt;<br><br>notice that now I'm checking for $coverage greater than 0 and I deal with $coverage = to 0 in my new line.<br><br><br><br>Here is the end result:<br><br><content binary="" sp32-20080612-224357.png="" alt="" border="0"><h3>Adding more details to the details report.</h3>Again I start using the supplied stylesheet but and I made the same changes (or very similar changes as in the previous file).I wanted to provide not just measures by class, but also have detailed measures by method and I wanted this to work the same way as the Nunit report does.You have an arrow besides the class name than when clicked displays the details for the class.To do so I copy some of the code from the unittest.xsl style from cc.netFirst you need to declare the applicationPath parameter&amp;lt;xsl:param name="applicationPath"/&amp;gt;Them you include the javascript to show and hide the details. Them you include the code to display the arrow and finally you add a for each to select all the methods inside the class and calculate the coverage.I decided to mark anything less than 100% as red.It's not because I think that we should achieve 100% of test coverage and if not the project is not complete, it's just that I wanted and easy way to find methods that may need to be tested on more details.Here is an image of the result with no details showing.<br><br><img src="images/posts/sp32-20080612-234824.png" alt="" border="0"><br><br>And here with details open<br><br><img src="images/posts/sp32-20080612-234848.png" alt="" border="0"><h3>Adding the statistics</h3>This actually went very smooth, open your ccnet.config file and add the following under the statistics tag of your project.&amp;lt;statisticList&amp;gt;&amp;lt;statistic name="Coverage" xpath="ceiling(100 * (sum(//PartCoverReport/type/method/code/pt[@visit&amp;gt;0]/@len)+0) div (sum(//PartCoverReport/type/method/code/pt/@len)+1))" /&amp;gt;&amp;lt;/statisticList&amp;gt;The only part that I have to give it any thought at all was in the xpath expression to calculate the project coverage percentage, but I think that I got it, notice the +1 in the second part of the expression, this is to prevent division by zero errors, this shouldn't affect the coverage percentage calculation in any meaningful way.</content>