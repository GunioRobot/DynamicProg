---
layout: post
title: Refactoring and OS project- take 1
summary:    First thing first. This is not bad code. This is a drop that is there and the developer make a point to clarify all the problems “he” has with the code at the moment. I needed to make it work in a more generic way and since most of the wor...
---

  First thing first. This is not bad code. This is a drop that is there and the developer make a point to clarify all the problems “he” has with the code at the moment. I needed to make it work in a more generic way and since most of the work is done for me, it’s better I refactor the existing code than start from scratch. I will send my changes to the original developer once I’m happy with them.
  I mentioned on Sunday about how I reorganized the code inside the solution and the refactoring I did, let’s take a look. Upon downloading this is how the solution looked like:
  <a href="../../../images/posts/RefactoringandOSprojecttake1_101/ScreenHunter_01%202009-02-23%2000.00.10_2.jpg"><img title="ScreenHunter_01 2009-02-23 00.00.10" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="220" alt="ScreenHunter_01 2009-02-23 00.00.10" src="../../../images/posts/RefactoringandOSprojecttake1_101/ScreenHunter_01%202009-02-23%2000.00.10_thumb.jpg" width="242" border="0" /></a> 
  After my changes this is what I have:
  <a href="../../../images/posts/RefactoringandOSprojecttake1_101/ScreenHunter_02%202009-02-23%2000.00.44_2.jpg"><img title="ScreenHunter_02 2009-02-23 00.00.44" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="396" alt="ScreenHunter_02 2009-02-23 00.00.44" src="../../../images/posts/RefactoringandOSprojecttake1_101/ScreenHunter_02%202009-02-23%2000.00.44_thumb.jpg" width="241" border="0" /></a> 
  Notice that most of the classes have been moved into a class library and the console just has the entry point. This reorganization have in mind the reuse of the common library code with a GUI.
  Also notice the UnitTests project.
  <h3></h3>  
  <h3>Extract method</h3>  My first refactoring was to remove as much code as possible from the Program.cs file, from this:
  <div style="font-size: 10pt; background: white; color: black; font-family: courier new">   <p style="margin: 0px"> <span style="color: blue">static</span> <span style="color: blue">void</span> Main(<span style="color: blue">string</span>[] args)
    <p style="margin: 0px"> {
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> vsinstrLocation = <span style="color: #a31515">@&amp;quot;C:\Program Files\Microsoft Visual Studio 9.0\Team Tools\Performance Tools&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> outputPathForInstrumentation = <span style="color: #a31515">@&amp;quot;E:\devtest\instrumentation&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: #2b91af">List</span>&amp;lt;<span style="color: blue">string</span>&amp;gt; toInstrument = <span style="color: blue">new</span> <span style="color: #2b91af">List</span>&amp;lt;<span style="color: blue">string</span>&amp;gt;();
    <p style="margin: 0px"> toInstrument.Add(<span style="color: #a31515">@&amp;quot;E:\devtest\ClassLibrary1.dll&amp;quot;</span>);
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> vstsCoverageOutputFile = <span style="color: #a31515">@&amp;quot;E:\devtest\reports\test.coverage&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> unitTestRunnerExecutable = <span style="color: #a31515">@&amp;quot;E:\devtest\mbunit\mbunit.cons.exe&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">string</span> unitTestArguments = <span style="color: #2b91af">Path</span>.Combine(outputPathForInstrumentation, <span style="color: #a31515">&amp;quot;ClassLibrary1.dll&amp;quot;</span>);
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> symbolsPath = outputPathForInstrumentation;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> exePath = outputPathForInstrumentation;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> outputXml = <span style="color: #a31515">@&amp;quot;E:\devtest\reports\mytestrun2.xml&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> coverageXslt = <span style="color: #a31515">@&amp;quot;E:\devtest\coverage.xslt&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> htmlOutputFile = <span style="color: #a31515">@&amp;quot;E:\devtest\reports\final.html&amp;quot;</span>;
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: #2b91af">VisualStudioInstrumentation</span> instrumentation = <span style="color: blue">new</span> <span style="color: #2b91af">VisualStudioInstrumentation</span>(vsinstrLocation);
    <p style="margin: 0px"> instrumentation.Instrument(outputPathForInstrumentation, toInstrument);
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: #2b91af">UnitTestRunner</span> testRunner = <span style="color: blue">new</span> <span style="color: #2b91af">UnitTestRunner</span>(unitTestRunnerExecutable, unitTestArguments);
    <p style="margin: 0px"> <span style="color: #2b91af">CoverageReportCreator</span> reportCreator = <span style="color: blue">new</span> <span style="color: #2b91af">CoverageReportCreator</span>(vstsCoverageOutputFile, symbolsPath, exePath, outputXml, coverageXslt, htmlOutputFile);
    <p style="margin: 0px"> <span style="color: #2b91af">CoverageGenerator</span> coverageGenerator = <span style="color: blue">new</span> <span style="color: #2b91af">CoverageGenerator</span>(vstsCoverageOutputFile, testRunner, reportCreator);
    <p style="margin: 0px">
    <p style="margin: 0px"> coverageGenerator.Execute();
    <p style="margin: 0px"> }
 </div>  To this:
  <div style="font-size: 10pt; background: white; color: black; font-family: courier new">   <p style="margin: 0px"> <span style="color: blue">static</span> <span style="color: blue">void</span> Main(<span style="color: blue">string</span>[] args)
    <p style="margin: 0px"> {
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> vsinstrLocation = <span style="color: #a31515">@&amp;quot;C:\Program Files\Microsoft Visual Studio 9.0\Team Tools\Performance Tools&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> outputPathForInstrumentation = <span style="color: #a31515">@&amp;quot;E:\devtest\instrumentation&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: #2b91af">List</span>&amp;lt;<span style="color: blue">string</span>&amp;gt; toInstrument = <span style="color: blue">new</span> <span style="color: #2b91af">List</span>&amp;lt;<span style="color: blue">string</span>&amp;gt;();
    <p style="margin: 0px"> toInstrument.Add(<span style="color: #a31515">@&amp;quot;E:\devtest\ClassLibrary1.dll&amp;quot;</span>);
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> vstsCoverageOutputFile = <span style="color: #a31515">@&amp;quot;E:\devtest\reports\test.coverage&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> unitTestRunnerExecutable = <span style="color: #a31515">@&amp;quot;E:\devtest\mbunit\mbunit.cons.exe&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">string</span> unitTestArguments = <span style="color: #2b91af">Path</span>.Combine(outputPathForInstrumentation, <span style="color: #a31515">&amp;quot;ClassLibrary1.dll&amp;quot;</span>);
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> symbolsPath = outputPathForInstrumentation;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> exePath = outputPathForInstrumentation;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> outputXml = <span style="color: #a31515">@&amp;quot;E:\devtest\reports\mytestrun2.xml&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> coverageXslt = <span style="color: #a31515">@&amp;quot;E:\devtest\coverage.xslt&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> htmlOutputFile = <span style="color: #a31515">@&amp;quot;E:\devtest\reports\final.html&amp;quot;</span>;
    <p style="margin: 0px">
    <p style="margin: 0px"> GetCodeCoverage(toInstrument, outputPathForInstrumentation, vsinstrLocation, unitTestRunnerExecutable, unitTestArguments, vstsCoverageOutputFile, symbolsPath, exePath, outputXml, coverageXslt, htmlOutputFile);
    <p style="margin: 0px"> }
 </div>  I them move GetCodeCoverage into a new class called CoverageAnalyzer in the class library project. Now I want to get ride of all the parameters for GetCodeCoverage.
  <h3>Introduce Object Parameter</h3>  <div style="font-size: 10pt; background: white; color: black; font-family: courier new">   <p style="margin: 0px"> <span style="color: #2b91af">CoverageAnalyzer</span>.GetCodeCoverage(<span style="color: blue">new</span> <span style="color: #2b91af">CodeCoverageParams</span>(toInstrument, outputPathForInstrumentation, vsinstrLocation, unitTestRunnerExecutable, unitTestArguments, vstsCoverageOutputFile, symbolsPath, exePath, outputXml, coverageXslt, htmlOutputFile));
 </div>  I start looking at the constants and deciding what I actually need to pass and what can have default values. I will keep everything configurable but I think that I can assume a lot of defaults and everything will continue working.
  So I write a bunch of test to validate my assumptions and test the <span style="color: #2b91af">CodeCoverageParams</span> class default.
  At this moment as well I do a lot of renaming to better indicate the variables purpose.
  The code in main looks like this now:
  <div style="font-size: 10pt; background: white; color: black; font-family: courier new">   <p style="margin: 0px"> <span style="color: blue">static</span> <span style="color: blue">void</span> Main(<span style="color: blue">string</span>[] args)
    <p style="margin: 0px"> {
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> vsinstrLocation = <span style="color: #a31515">@&amp;quot;C:\Program Files\Microsoft Visual Studio 9.0\Team Tools\Performance Tools&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> pathToCodeToInstrument = <span style="color: #a31515">@&amp;quot;C:\devtest&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">var</span> assembliesToInstrument = <span style="color: blue">new</span> <span style="color: #2b91af">List</span>&amp;lt;<span style="color: blue">string</span>&amp;gt; {<span style="color: #a31515">@&amp;quot;C:\devtest\UnitTest.dll&amp;quot;</span>};
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> vstsCoverageOutputFile = <span style="color: #a31515">@&amp;quot;C:\devtest\test.coverage&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> unitTestRunnerExecutable = <span style="color: #a31515">@&amp;quot;C:\devtest\unittest\nunit-console.exe&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">string</span> unitTestArguments = <span style="color: #2b91af">Path</span>.Combine(pathToCodeToInstrument, <span style="color: #a31515">&amp;quot;UnitTest.dll&amp;quot;</span>);
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> symbolsPath = pathToCodeToInstrument;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> exePath = pathToCodeToInstrument;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> outputXml = <span style="color: #a31515">@&amp;quot;C:\devtest\mytestrun2.xml&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> coverageXslt = <span style="color: #a31515">@&amp;quot;C:\devtest\coverage.xslt&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> htmlOutputFile = <span style="color: #a31515">@&amp;quot;C:\devtest\final.html&amp;quot;</span>;
    <p style="margin: 0px">
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: #2b91af">CoverageAnalyzer</span>.GetCodeCoverage(<span style="color: blue">new</span> <span style="color: #2b91af">CodeCoverageParams</span>(pathToCodeToInstrument, assembliesToInstrument, unitTestRunnerExecutable, unitTestArguments));
    <p style="margin: 0px"> }
 </div>  You can’t tell on the code but R# is telling me that: vsinstrLocation, vstsCoverageOutputFile, symbolsPath, exePath, outputXml, coverageXslt and htmlOutputFile are not been used.
  So I can delete them and now the code on main looks even nicer:
  <div style="font-size: 10pt; background: white; color: black; font-family: courier new">   <p style="margin: 0px"> <span style="color: blue">static</span> <span style="color: blue">void</span> Main(<span style="color: blue">string</span>[] args)
    <p style="margin: 0px"> {
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> pathToCodeToInstrument = <span style="color: #a31515">@&amp;quot;C:\devtest&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">var</span> assembliesToInstrument = <span style="color: blue">new</span> <span style="color: #2b91af">List</span>&amp;lt;<span style="color: blue">string</span>&amp;gt; {<span style="color: #a31515">@&amp;quot;C:\devtest\UnitTest.dll&amp;quot;</span>};
    <p style="margin: 0px"> <span style="color: blue">const</span> <span style="color: blue">string</span> unitTestRunnerExecutable = <span style="color: #a31515">@&amp;quot;C:\devtest\unittest\nunit-console.exe&amp;quot;</span>;
    <p style="margin: 0px"> <span style="color: blue">string</span> unitTestArguments = <span style="color: #2b91af">Path</span>.Combine(pathToCodeToInstrument, <span style="color: #a31515">&amp;quot;UnitTest.dll&amp;quot;</span>);
    <p style="margin: 0px">
    <p style="margin: 0px"> <span style="color: #2b91af">CoverageAnalyzer</span>.GetCodeCoverage(<span style="color: blue">new</span> <span style="color: #2b91af">CodeCoverageParams</span>(pathToCodeToInstrument, assembliesToInstrument, unitTestRunnerExecutable, unitTestArguments));
    <p style="margin: 0px"> }
 </div>  Now my next task will be to parse the arguments passed on the command prompt and eliminate all the const and hardcoded strings for good. Some validation of the minimum set of parameters will be needed. This validation is already in place thanks to the Unit tests written for the <span style="color: #2b91af">CodeCoverageParams</span> class.
  Let’s continue tomorrow.
