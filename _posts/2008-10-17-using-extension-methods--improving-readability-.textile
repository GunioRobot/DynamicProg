---
layout: post
title: Using Extension methods- Improving readability.
summary: I consider extension methods one of the most interesting features of the .Net framework. I like it so much because It brings some of the strength of JavaScript into the framework. The possibility of write stuff like this.Have fun!!!
categories: [Programming]
---

I consider extension methods one of the most interesting features of the .Net framework. I like it so much because It brings some of the strength of JavaScript into the framework. The possibility of write stuff like this.

{% highlight aspx-cs %}
	var percentage = 10.PercentOf(100);
{% endhighlight %}

An do stuff like this:

{% highlight aspx-cs %}
	public void OutputTabData(List<post> posts)
	{
		var rowTemplate = "{0}\t{1}\t{2}\n";
		posts.ForEach(f => Console.WriteLine(string.Format(rowTemplate, f.Title, f.Author, f.Posted)));		
	}
	//First post Hernan 17/10/2008 11:45:10 PM
	//Second post Diego 17/10/2008 11:45:10 PM
{% endhighlight %}

There are a lot of discussions about when to use extension methods and when not to. The problem is when you use extension methods instead of inheritance.

<h3>Using extension methods to augment the framework or modify the language.</h3>

A clear choice for me is when you want to augment types, like the previous example of using PercentOf in an integer.Or what about this.

{% highlight aspx-cs %} 
	Console.WriteLine(4.DaysAgo());
	Console.WriteLine(4.YearsFromNow()); 
	//14/10/2008 12:07:11 AM
	//18/10/2012 12:07:11 AM
{% endhighlight %}

Or what about having a handy method to get the Unix Time right from the DateTime object?

{% highlight aspx-cs %} 
	var unixDate = DateTime.Now.ToUnixTime();
	//1224303150.54688
{% endhighlight %}

Or the other way around

{% highlight aspx-cs %} 
	var date = 1224303150.54688.FromUnixTime();
	// 18/10/2008
{% endhighlight %}

<h3>Encapsulate functionality that you always do.</h3>

I need to use Reflection quite a lot for one of my projects and I have a set of methods to do some very common operations, like get a value from a property, get a list of properties, etc. What if those methods where available for you in every object?

{% highlight aspx-cs %} 
	var result = new MyClass().GetPropertyList();
	foreach (var key in result.Keys)
	{
		Console.WriteLine(key + " = " + result[key].ToString());
	}
	// _fieldOne = value of field 1
	// _fieldTwo = value of field 2
{% endhighlight %}

And what about some handy string methods

{% highlight aspx-cs %} 
	"There is   a   lot of white     space  in here  .    ".Squeeze();
	//"There is a lot of white space in here."
{% endhighlight %}

Have fun!!! 

_Some of the utilities methods like Squeeze are part of the Subsonic Utilities library that I modified and turned into extension methods._