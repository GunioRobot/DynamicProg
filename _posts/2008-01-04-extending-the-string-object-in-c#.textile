---
layout: post
title: Extending the string object in c#
summary: UPDATE: Thanks to Peter I modify where the string[] is declared and changed an obvious mistake instead of string s = ""; I use the correct form of string s = string.Empty;, I can't believe I miss that one, I really annoy me tea...
---
<span class="Code">UPDATE: Thanks to Peter I modify where the string[] is declared and changed an obvious mistake instead of string s = ""; I use the correct form of string s = string.Empty;, I can't believe I miss that one, I really annoy me team with that line :-)</span>
I have found some controversy in post demostrating how to extend the string object. Sometimes the controversy is around the examples presented. So I decided to make my own example with methods that I wish were included in the framework.
String has two very useful methods ToUpper() and ToLower(), but I found myself looking for a good ToCamel(), ToPascal(), Capitalize() and CapitalizeAll() methods one too many times.
<h4>Let's write down what we want to acomplish.</h4><table style="width: 100%;" border="0" cellpadding="1" cellspacing="1">    <tbody>        <tr>            <td>            Method
            </td>            <td>Definition</td>        </tr>        <tr>            <td>ToCamel()</td>            <td>Given a set of words separated by a space or an underscore return a lower Camel cased word. ex: Hernan Garcia -&amp;gt; hernanGarcia</td>        </tr>        <tr>            <td>ToPascal()</td>            <td>Like ToCamel but all words start with an uppercase</td>        </tr>        <tr>            <td>Capitalize()</td>            <td>Given a word or a phrase make the first letter of the phrase and the first letter after a point Upper case and all the rest lower case.</td>        </tr>        <tr>            <td>CapitalizeAll()</td>            <td>Like Capitalize but all words start with an uppercase letter.</td>        </tr>    </tbody></table>
<h4>&amp;nbsp;ToCamel()</h4>The implementation is super simple.
<pre lang="csharp">public static string ToCamel(this string value)<br>        {<br>            var s = value;<br>            s = s.Trim().ToLower();<br>            <br>            if (s.Length == 0)<br>            {<br>                return value;<br>            }</pre><pre lang="csharp">string[] ar = null;<br><br>            if (s.IndexOf('_') &amp;gt; -1)<br>            {<br>                ar = s.Split('_');<br>            }<br>            else if (s.IndexOf(' ') &amp;gt; -1)<br>            {<br>                ar = s.Split(' ');<br>            }<br><br>            if (ar != null)<br>            {<br>                for (int i = 0; i &amp;lt; ar.Length; i++)<br>                {<br>                    if (ar[i].Trim().Length &amp;gt; 0)<br>                    {<br>                        if (i == 0)<br>                        {<br>                            s = ar[i];<br>                        }<br>                        else<br>                        {<br>                            s += ar[i].Substring(0, 1).ToUpper() + ar[i].Substring(1);<br>                        }<br>                    }<br>                }<br>                return s;<br>            }<br>            return value;<br>        }</pre>An example of usage:
<pre lang="csharp">static void Main(string[] args)<br>        {<br>            Console.WriteLine("this is going to be something".ToCamel());<br>            Console.WriteLine("hernan_garcia".ToCamel());<br>            Console.WriteLine("Hernan  Garcia".ToCamel());<br>            Console.WriteLine("HernanGarcia".ToCamel());<br>        }</pre>&amp;nbsp;The result:
<img src="content/binary/SP32-20080105-000550.png" alt="" class="" height="127" width="270">
<h4>ToPascal()</h4><pre lang="csharp">public static string ToPascal(this string value)<br>        {<br>            var s = value;<br>            s = s.Trim().ToLower();<br>            <br>            if (s.Length == 0)<br>            {<br>                return value;<br>            }<br>            string[] ar = null;<br><br>            if (s.IndexOf('_') &amp;gt; -1)<br>            {<br>                ar = s.Split('_');<br>            }<br>            else if (s.IndexOf(' ') &amp;gt; -1)<br>            {<br>                ar = s.Split(' ');<br>            }<br>            s = string.Empty;<br>            if (ar != null)<br>            {<br>                for (int i = 0; i &amp;lt; ar.Length; i++)<br>                {<br>                    if (ar[i].Trim().Length &amp;gt; 0)<br>                    {<br>                        s += ar[i].Substring(0, 1).ToUpper() + ar[i].Substring(1);<br>                    }<br>                }<br>                return s;<br>            }<br>            return value;<br>        }</pre>Example:
<pre lang="csharp">Console.WriteLine("this is going to be something".ToPascal());<br>            Console.WriteLine("hernan_garcia".ToPascal());<br>            Console.WriteLine("Hernan  Garcia".ToPascal());<br>            Console.WriteLine("HernanGarcia".ToPascal());</pre>The result:
<img src="content/binary/SP32-20080105-003049.png" alt="" class="" height="95" width="242">
<h4>Capitalize()</h4>The code
<pre lang="csharp">public static string Capitalize(this string value)<br>        {<br>            var s = value;<br>            s = s.Trim().ToLower();<br>            <br>            if (s.Length == 0)<br>            {<br>                return value;<br>            }<br><br>            string[] ar = s.Split('.');<br><br>            s = string.Empty;<br>            if (ar != null)<br>            {<br>                for (int i = 0; i &amp;lt; ar.Length; i++)<br>                {<br>                    if (ar[i].Trim().Length &amp;gt; 0)<br>                    {<br>                        s += ar[i].Trim().Substring(0, 1).ToUpper() + ar[i].Trim().Substring(1) + ". ";<br>                    }<br>                }<br>                return s;<br>            }<br>            return value;<br>        }</pre>Example:
<pre lang="csharp">Console.WriteLine("this is going to be something".Capitalize());<br>            Console.WriteLine("nothing To Look AT HERE.".Capitalize());<br>            Console.WriteLine("this is going to be something. nothing To Look AT HERE.".Capitalize());<br>            Console.WriteLine("hernan_garcia".Capitalize());<br>            Console.WriteLine("Hernan  Garcia".Capitalize());<br>            Console.WriteLine("Hernan garcia".Capitalize());</pre>The result:
<img src="content/binary/SP32-20080105-004245.png" alt="" class="" height="139" width="445">
&amp;nbsp;
<h4>CapitalizeAll()</h4>The code:
<pre lang="csharp">public static string CapitalizeAll(this string value)<br>        {<br>            var s = value;<br>            s = s.Trim().ToLower();<br>            <br>            if (s.Length == 0)<br>            {<br>                return value;<br>            }<br><br>            string[] ar = s.Split(' ');<br>           <br>            s = string.Empty;<br>            if (ar != null)<br>            {<br>                for (int i = 0; i &amp;lt; ar.Length; i++)<br>                {<br>                    if (ar[i].Trim().Length &amp;gt; 0)<br>                    {<br>                        s += ar[i].Trim().Substring(0, 1).ToUpper() + ar[i].Trim().Substring(1) + " ";<br>                    }<br>                }<br>                return s;<br>            }<br>            return value;<br>        }</pre>Example:
<pre lang="csharp">Console.WriteLine("this is going to be something".CapitalizeAll());<br>            Console.WriteLine("hernan_garcia".CapitalizeAll());<br>            Console.WriteLine("Hernan  Garcia".CapitalizeAll());<br>            Console.WriteLine("Hernan garcia".CapitalizeAll());</pre>The result:
<img src="content/binary/SP32-20080105-003624%281%29.png" alt="" class="" height="101" width="327">
There are some other methods in this same line that we can create, for example a method to convert back from Pascal or Camel into a space or underscore separate string.
