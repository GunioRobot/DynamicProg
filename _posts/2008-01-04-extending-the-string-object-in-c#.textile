---
layout: post
title: Extending the string object in c#
summary: UPDATE- Thanks to Peter I modify where the string[] is declared and changed an obvious mistake instead of y team with that
categories: [Programming, .Net]
---

<strong>UPDATE: Thanks to Peter I modify where the string[] is declared and changed an obvious mistake instead of string s = ""; I use the correct form of string s = string.Empty;, I can't believe I miss that one, I really annoy my team with that :-)</strong>

I have found some controversy in post demostrating how to extend the string object. Sometimes the controversy is around the examples presented. So I decided to make my own example with methods that I wish were included in the framework.

String has two very useful methods ToUpper() and ToLower(), but I found myself looking for a good ToCamel(), ToPascal(), Capitalize() and CapitalizeAll() methods one too many times.

<h3>Let's write down what we want to acomplish.</h3>

<table style="width: 100%;" border="0" cellpadding="1" cellspacing="1">    
	<tbody>
		<tr>
			<td>Method</td>
			<td>Definition</td>
		</tr>
		<tr>
			<td>ToCamel()</td>
			<td>Given a set of words separated by a space or an underscore return a lower Camel cased word. ex: Hernan Garcia -> hernanGarcia</td>
		</tr>
		<tr>
			<td>ToPascal()</td>
			<td>Like ToCamel but all words start with an uppercase</td>
		</tr>
		<tr>
			<td>Capitalize()</td>
			<td>Given a word or a phrase make the first letter of the phrase and the first letter after a point Upper case and all the rest lower case.</td>
		</tr>
		<tr>
			<td>CapitalizeAll()</td>
			<td>Like Capitalize but all words start with an uppercase letter.</td>
		</tr>
	</tbody>
</table>

<h3>ToCamel()</h3>

The implementation is super simple.

{% highlight aspx-cs %}
	public static string ToCamel(this string value)
	{
		var s = value;
		s = s.Trim().ToLower();
		
		if (s.Length == 0)
		{
			return value;
		}
		
		string[] ar = null;
		if (s.IndexOf('_') > -1)
		{
			ar = s.Split('_');
		}
		else if (s.IndexOf(' ') > -1)
		{
			ar = s.Split(' ');
		}
		
		if (ar != null)
		{
			for (int i = 0; i < ar.Length; i++)
			{
				if (ar[i].Trim().Length > 0)
				{
					if (i == 0)
					{
						s = ar[i];
					}
					else
					{
						s += ar[i].Substring(0, 1).ToUpper() + ar[i].Substring(1);
					}
				}
			}
			return s;
		}
		return value;
	}
{% endhighlight %}
	
An example of usage:

{% highlight aspx-cs %}
	static void Main(string[] args)
	{
		Console.WriteLine("this is going to be something".ToCamel());
		Console.WriteLine("hernan_garcia".ToCamel());
		Console.WriteLine("Hernan  Garcia".ToCamel());
		Console.WriteLine("HernanGarcia".ToCamel());
	}
{% endhighlight %}

The result:

<img src="../../../images/posts/SP32-20080105-000550.png" alt="" class="" height="127" width="270">

<h3>ToPascal()</h3>

{% highlight aspx-cs %}
	public static string ToPascal(this string value)
	{
		var s = value;
		s = s.Trim().ToLower();
		if (s.Length == 0)
		{
			return value;
		}
		string[] ar = null;
		if (s.IndexOf('_') > -1)
		{
			ar = s.Split('_');
		}
		else if (s.IndexOf(' ') > -1)
		{
			ar = s.Split(' ');
		}
		s = string.Empty;
		if (ar != null)
		{
			for (int i = 0; i < ar.Length; i++)
			{
				if (ar[i].Trim().Length > 0)
				{
					s += ar[i].Substring(0, 1).ToUpper() + ar[i].Substring(1);
				}
			}
			return s;
		}
		return value;
	}
{% endhighlight %}

Example:

{% highlight aspx-cs %}
	Console.WriteLine("this is going to be something".ToPascal());
	Console.WriteLine("hernan_garcia".ToPascal());
	Console.WriteLine("Hernan  Garcia".ToPascal());
	Console.WriteLine("HernanGarcia".ToPascal());
{% endhighlight %}

The result:

<img src="../../../images/posts/SP32-20080105-003049.png" alt="" class="" height="95" width="242">

<h3>Capitalize()</h3>

The code

{% highlight aspx-cs %}
	public static string Capitalize(this string value)
	{
		var s = value;
		s = s.Trim().ToLower();
		if (s.Length == 0)
		{
			return value;
		}
		string[] ar = s.Split('.');
		s = string.Empty;
		if (ar != null)
		{
			for (int i = 0; i < ar.Length; i++)
			{
				if (ar[i].Trim().Length > 0)
				{
					s += ar[i].Trim().Substring(0, 1).ToUpper() + ar[i].Trim().Substring(1) + ". ";
				}
			}
			return s;
		}
		return value;
	}
{% endhighlight %}

Example:

{% highlight aspx-cs %}
	Console.WriteLine("this is going to be something".Capitalize());
	Console.WriteLine("nothing To Look AT HERE.".Capitalize());
	Console.WriteLine("this is going to be something. nothing To Look AT HERE.".Capitalize());
	Console.WriteLine("hernan_garcia".Capitalize());
	Console.WriteLine("Hernan Garcia".Capitalize());
	Console.WriteLine("Hernan garcia".Capitalize());
</pre>
{% endhighlight %}

The result:

<img src="../../../images/posts/SP32-20080105-004245.png" alt="" class="" height="139" width="445">

<h3>CapitalizeAll()</h3>

The code:

{% highlight aspx-cs %}
	public static string CapitalizeAll(this string value)
	{
		var s = value;
		s = s.Trim().ToLower();
		if (s.Length == 0)
		{
			return value;
		}
		string[] ar = s.Split(' ');
		s = string.Empty;
		if (ar != null)
		{
			for (int i = 0; i < ar.Length; i++)
			{
				if (ar[i].Trim().Length > 0)
				{
					s += ar[i].Trim().Substring(0, 1).ToUpper() + ar[i].Trim().Substring(1) + " ";
				}
			}
			return s;
		}
		return value;
	}
{% endhighlight %}

Example:

{% highlight aspx-cs %}
	Console.WriteLine("this is going to be something".CapitalizeAll());
	Console.WriteLine("hernan_garcia".CapitalizeAll());
	Console.WriteLine("Hernan  Garcia".CapitalizeAll());
	Console.WriteLine("Hernan garcia".CapitalizeAll());
{% endhighlight %}
	
The result:

<img src="../../../images/posts/SP32-20080105-003624%281%29.png" alt="" class="" height="101" width="327">

There are some other methods in this same line that we can create, for example a method to convert back from Pascal or Camel into a space or underscore separate string.