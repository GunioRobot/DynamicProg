<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2009-02-26T17:00:00-07:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Today I move the code of LaTrompa.Validation into it’s own package, with no external dependencies (besides the framework of course).&lt;/p&gt;  &lt;p&gt;I added a class to validate XmlNodes.&lt;/p&gt;  &lt;p&gt;The string validation now has a IsOneOf method to match the string against a list of options.&lt;/p&gt;  &lt;div style="font-size: 10pt; background: white; color: black; font-family: courier new"&gt;   &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;var&lt;/span&gt; options = &lt;span style="color: blue"&gt;new&lt;/span&gt;[] { &lt;span style="color: #a31515"&gt;&amp;quot;0056&amp;quot;&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;0256&amp;quot;&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;0512&amp;quot;&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;0752&amp;quot;&lt;/span&gt;, &lt;span style="color: #a31515"&gt;&amp;quot;1100&amp;quot;&lt;/span&gt; };&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;new&lt;/span&gt; &lt;span style="color: #2b91af"&gt;Validator&lt;/span&gt;().CheckThat(() =&amp;gt; _stringToTest).IsOneOf(options)&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .ThrowFirst();&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&lt;/p&gt; &lt;/div&gt;  &lt;p&gt;I still need to add a generic version for this method, I guess it pass by me.&lt;/p&gt;  &lt;p&gt;Also in the string validation there are two new validations to check if a string can be converted into an Int32 or a Boolean.&lt;/p&gt;  &lt;div style="font-size: 10pt; background: white; color: black; font-family: courier new"&gt;   &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;new&lt;/span&gt; &lt;span style="color: #2b91af"&gt;Validator&lt;/span&gt;().CheckThat(()=&amp;gt; &lt;span style="color: #a31515"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;).CanConvertToBool().Throw();&lt;/p&gt; &lt;/div&gt;  &lt;br /&gt;  &lt;div style="font-size: 10pt; background: white; color: black; font-family: courier new"&gt;   &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;new&lt;/span&gt; &lt;span style="color: #2b91af"&gt;Validator&lt;/span&gt;().CheckThat(()=&amp;gt;&lt;span style="color: #a31515"&gt;&amp;quot;23&amp;quot;&lt;/span&gt;).CanConvertToInt32().ThrowFirst();&lt;/p&gt; &lt;/div&gt;  &lt;p&gt;The whole conversion validation looks like a good candidate for refactoring and generalize it into a base class. that way it will be easy to offer conversion checking against all types.&lt;/p&gt;  &lt;p&gt;I added the ThrowFirst method into the Validator class. This method was available only in the CheckThat classes.&lt;/p&gt;  &lt;div style="font-size: 10pt; background: white; color: black; font-family: courier new"&gt;   &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;var&lt;/span&gt; secondVariable = 45;&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="color: blue"&gt;var&lt;/span&gt; validator = &lt;span style="color: blue"&gt;new&lt;/span&gt; &lt;span style="color: #2b91af"&gt;Validator&lt;/span&gt;();&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; validator.CheckThat(() =&amp;gt; _stringToTest).HasNoSpaces().LengthLessThan(4);&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; validator.CheckThat(() =&amp;gt; secondVariable).IsBetween(56, 100);&lt;/p&gt;    &lt;p style="margin: 0px"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; validator.ThrowFirst();&lt;/p&gt; &lt;/div&gt;  &lt;p&gt;I moved all the Throw methods into their own class ErrorThrower (I should rename this to ExceptionThrower). Previously I was doing almost the same thing in two different places. Not very &lt;a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank"&gt;DRY&lt;/a&gt;. &lt;/p&gt;</Content>
      <Created>2009-02-27T04:42:00-07:00</Created>
      <Modified>2009-02-24T21:43:09.7706685-07:00</Modified>
      <EntryId>cf185dee-1739-4df9-9f36-93149aaf915c</EntryId>
      <Description />
      <Title>Validator moves to it’s own package</Title>
      <Categories>Programming;Tools</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>