<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2008-01-18T17:00:00-07:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;A free tool to do code coverage with a nice GUI for the developers to use, that can be run on the command prompt, that generates nice xml based reports (to integrate with your CC server) and best of all for me) that works fine with Static methods.&lt;/p&gt;&lt;p&gt;This gem is called &lt;a href="http://sourceforge.net/project/screenshots.php?group_id=175733&amp;amp;ssid=40823"&gt;PartCover&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;In the continuous quest to improve my team code quality I'm pushing hard to move more and more into a TDD approach. (I should make a side note here and indicate that at this moment my main concern is have a nice battery of unit test in place even if they are written after the fact). We are having clinics and the senior developers teach the junior guys how to use Nunit, Nant and now we are playing with some Code coverage tools.&lt;/p&gt;&lt;p&gt;We were going to jump into NCover since is the one that most of us have experience with, but there was a problem and it was that our massive Utility library is mainly a collection of static methods and NCover doesn't seem to like Static methods, so there are no metrics of how much code have been tested in those libraries. That is a bit of a problem for us.&lt;/p&gt;&lt;p&gt;Another issue was that now NCover seems to come in two flavors (or two projects) the free one in &lt;a href="http://ncover.sourceforge.net/"&gt;sourceforge&lt;/a&gt; and a commercial version at &lt;a href="http://www.ncover.com/"&gt;Ncover.org&lt;/a&gt;. The price for the commercial version is not terrible (169 to 199&amp;nbsp; USD + service plan if you want)&amp;nbsp; and we thought that we may run it just in the integration server in the worse case scenario. The free project have a note in the home page that discourage us from use it, and that is that the project to cover needs a reference to a Ncover library. We are not sure if they are talking about the testing project (the one with the test fixtures or the actual library that is been tested, something that sounds crazy), but in any case having to include another dependency was a big deterrent for us.&lt;/p&gt;&lt;p&gt;The commercial version was fine, fairly easy to set up (even without a lot of documentation, why is documentation for this tools so cryptic?!) and worked well enough, but the lack of measurement in static methods was bad for us.&lt;/p&gt;&lt;p&gt;You can argue that you shouldn't use static methods in such a liberal fashion and that make for a bad OO design (something that I agree) and makes your programming model look more and more like procedural and you will be right, only that in this cases there is no major implementation and besides a Network library and a serialization library that needs to be re-written the lions share resides in our Utils class.&lt;/p&gt;&lt;h2&gt;PartCover to the rescue.&lt;/h2&gt;&lt;p&gt;I was upset with the compromise and took me almost no time (the second search on google) to stumble upon this free awesome tool. The interface is similar to NCover but more frugal.&lt;/p&gt;&lt;p&gt;There is a File menu with four options:&lt;/p&gt;&lt;p&gt;Run target (to generate the report)&lt;br&gt;Open Report&lt;br&gt;Save report as&lt;br&gt;Exit&lt;/p&gt;&lt;p&gt;It can be more straightforward.&lt;br&gt;To generate the report you will to enter the same data as in NCover.&lt;/p&gt;&lt;p&gt;Executable file: should point to the console exe for your testing framework in my case nunit-console.exe&lt;br&gt;Working Directory: This is the folder where the dll with your test fixture resides, for example C:\Project\Project1\UnitTesting\bin\Debug&lt;br&gt;Working arguments: Depends but in the case of nunit is the dll where with the test fixtures (ex: UnitTesting.dll)&lt;/p&gt;&lt;p&gt;The tricky part is the fourth text box (a text area really), where you enter "Rules", this rules tell PartCover witch assemblies/classes to look for coverage and what to left out.&lt;/p&gt;&lt;p&gt;For example if you have to dll one called Mainframe.dll and another one called desktop.dll and you want to check both of them you will enter a Rule like this&lt;/p&gt;&lt;p&gt;+[Mainframe]*&lt;br&gt;+[Desktop]*&lt;/p&gt;&lt;p&gt;To exclude the mouse class from the desktop dll you add the following&lt;/p&gt;&lt;p&gt;-[Desktop]*mouse*&lt;/p&gt;&lt;p&gt;Another nice feature is that the dll with the fixture is not included (another thing that bothered me from NCover). The tool has a command prompt option, so running from Nant is no problem, and the report is generated as xml, so integrate it with CC.net should not be an issue, the even provide two xslt files to display the report based on the assembly or based on the class very neat!!!.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UPDATE: Two days after writing this post I found the &lt;a href="http://www.icsharpcode.net/OpenSource/SD/"&gt;SharpDevelop &lt;/a&gt;will be (is) using PartCover in SharpDevelop 3.0 and beyond.&lt;/strong&gt;&lt;/p&gt;&lt;!--dotnetkickit--&gt;</Content>
      <Created>2008-01-19T00:13:57-07:00</Created>
      <Modified>2008-12-14T22:37:06.8425091-07:00</Modified>
      <EntryId>34</EntryId>
      <Description />
      <Title>PartCover the Code Coverage tool for me</Title>
      <Categories>Methodology;Testing;Tools</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>