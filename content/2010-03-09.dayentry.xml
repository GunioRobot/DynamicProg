<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-03-08T17:00:00-07:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;blockquote&gt; &lt;p&gt;&lt;em&gt;The code in this post is of demo quality and should not be taken as production ready code. It’s a first take on the project and will evolve during a series of posts.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;a href="http://www.dotnetblogengine.net/" target="_blank"&gt;Blogengine.net&lt;/a&gt; is an open source blogging platform written in asp.net. The engine comes with two Data store providers a DB provider and an XML provider. Since the engine is using the provider model, it should be fairly easy to write a new data store provider.&lt;/p&gt; &lt;p&gt;As you may have noticed by some of my previous posts, I’m really interested in alternatives to relational databases, the so called NoSql movement. &lt;/p&gt; &lt;h5&gt;Getting all the pieces together.&lt;/h5&gt; &lt;p&gt;First download the Blogengine.net source code from &lt;a href="http://www.codeplex.com/blogengine" target="_blank"&gt;codeplex.com&lt;/a&gt;, a &lt;a href="http://github.com/samus/mongodb-csharp/downloads" target="_blank"&gt;mongodb driver&lt;/a&gt; for .net and &lt;a href="http://www.mongodb.org/display/DOCS/Downloads" target="_blank"&gt;mongodb&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;At the moment I’m aware of two drivers for .net, the more mature &lt;a href="http://github.com/samus/mongodb-csharp/downloads" target="_blank"&gt;mongodb-csharp&lt;/a&gt; and a more resent one &lt;a href="http://github.com/atheken/NoRM" target="_blank"&gt;NoRM&lt;/a&gt;. NoRM is trying to provide a more OO experience, avoiding the use of strings as much as possible and embracing Linq, it’s still very young but very promising. You can check &lt;a href="http://blog.wekeroad.com/2010/03/04/using-mongo-with-linq" target="_blank"&gt;an article by Rob Connery&lt;/a&gt; to learn some of the capabilities. We will be using mongodb-csharp in this example. (Build from 2010-03-01).&lt;/p&gt; &lt;p&gt;Be certain of download the proper version of MongoDB for your OS 32 or 64 bits.&lt;/p&gt; &lt;h5&gt;Installing MongoDB&lt;/h5&gt; &lt;p&gt;Unzip the files downloaded into a folder of your choice. I’m using c:\MongoDB.&lt;/p&gt; &lt;p&gt;Create a data and db folders under c, you should have something like c:\data\db&lt;/p&gt; &lt;p&gt;Run mongod.exe from the mobogodb bin folder.&lt;/p&gt;&lt;pre style="border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #000000; min-height: 40px; padding-left: 5px; width: 690px; padding-right: 5px; height: 150px; color: #fff; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px"&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;c:\MongoDB\bin&amp;gt;mongod.exe
&lt;/pre&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;mongod.exe --help for help and startup options
&lt;/pre&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;Fri Mar 05 23:09:29 Mongo DB : starting : pid = 0 port = 27017 dbpath = /data/db/ master = 0 slave = 0  64-bit
&lt;/pre&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;Fri Mar 05 23:09:29 db version v1.2.4, pdfile version 4.5
&lt;/pre&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;Fri Mar 05 23:09:29 git version: 5cf582d3d96b882c400c33e7670b811ccd47f477
&lt;/pre&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;Fri Mar 05 23:09:29 sys info: windows (6, 0, 6002, 2, 'Service Pack 2') BOOST_LIB_VERSION=1_39
&lt;/pre&gt;&lt;pre style="background-color: #000000; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;Fri Mar 05 23:09:29 waiting for connections on port 27017&lt;/pre&gt;&lt;/pre&gt;
&lt;p&gt;To stop the daemon just type Ctrl+c.&lt;/p&gt;
&lt;h5&gt;Setting up the project.&lt;/h5&gt;
&lt;p&gt;You can download the project as I have it set from &lt;a href="http://nosqlproviders.codeplex.com/" target="_blank"&gt;my codeplex repo&lt;/a&gt; using Mercurial to save you some time.(Changeset &lt;a href="http://nosqlproviders.codeplex.com/SourceControl/changeset/view/59b63f72169f"&gt;59b63f72169f&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;What I did was to create a new folder \lib under the solution root (of the BlogEngine.Net code), added Nunit, Rhino Mocks and the MongoDb drivers libraries. Them from within VS I added an Specs project to hold my test and a second project to hold the code for the provider.&lt;/p&gt;
&lt;p&gt;You should have something like this right now.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.dynamicprogrammer.com/content/binary/WindowsLiveWriter/CreatingaMongoDBproviderforBlogengin.Net_14694/initial_solution_set_up.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="initial_solution_set_up" border="0" alt="initial_solution_set_up" src="http://blog.dynamicprogrammer.com/content/binary/WindowsLiveWriter/CreatingaMongoDBproviderforBlogengin.Net_14694/initial_solution_set_up_thumb.png" width="244" height="168"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;And the following directory structure.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.dynamicprogrammer.com/content/binary/WindowsLiveWriter/CreatingaMongoDBproviderforBlogengin.Net_14694/initial_dir_structure.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="initial_dir_structure" border="0" alt="initial_dir_structure" src="http://blog.dynamicprogrammer.com/content/binary/WindowsLiveWriter/CreatingaMongoDBproviderforBlogengin.Net_14694/initial_dir_structure_thumb.png" width="288" height="275"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;You may not have the Resharper files and folders, that depends if you have Resharper installed or not.&lt;/p&gt;
&lt;h5&gt;Lets write the first test for our MongoDBProvider and generate the class, it needs to inherit from BlogProvider.&lt;/h5&gt;
&lt;p&gt;Even when I have the source I’m treating BlogEngine.Net as a close system. This change a little bit the way I will develop such a provider. I have control of the code there are a bunch of stuff that I will probably refactor or move around. But in this case I can’t since I don’t want to fork the project.&lt;/p&gt;
&lt;p&gt;The first test will be to insert a new post. The code will look something like this.&lt;/p&gt;&lt;pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;override&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; InsertPost(Post post)
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;        {
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;            &lt;span style="color: #0000ff"&gt;using&lt;/span&gt; (var db = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; MongoDB())
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;            {
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;                db.Insert(post);
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;            }
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;        }&lt;/pre&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the MongoDB class.&lt;/p&gt;&lt;pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  1:     &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; MongoDB : IDisposable
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  2:     {
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  3:         &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; Mongo _server;
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  4:         &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; Database _db;
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  5: 
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  6:         &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; MongoDB()
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  7:         {
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  8:             _server = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mongo();
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt;  9:         }
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 10: 
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 11:         &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; Database Db()
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 12:         {
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 13:             &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (_db != &lt;span style="color: #0000ff"&gt;null&lt;/span&gt;) &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; _db;
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 14:             var server = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mongo();
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 15:             server.Connect();
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 16:             _db = server.getDB(BlogSettings.Instance.Name.Replace("&lt;span style="color: #8b0000"&gt; &lt;/span&gt;", "&lt;span style="color: #8b0000"&gt;_&lt;/span&gt;"));
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 17:             &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; _db;
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 18:         }
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 19:         &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Insert&amp;lt;TEntity&amp;gt;(TEntity entity)
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 20:         {
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 21:             Document document = DocumentMapperFactory.GetMapper&amp;lt;TEntity&amp;gt;().Map(entity);
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 22:             Db().GetCollection(entity.GetType().Name+"&lt;span style="color: #8b0000"&gt;Docs&lt;/span&gt;").Insert(document);
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 23:         }
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 24:         
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 25:         &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Dispose()
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 26:         {
&lt;/pre&gt;&lt;pre style="background-color: #ffff80; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 27:             _server.Disconnect();
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 28:             _server.Dispose();
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 29:         }
&lt;/pre&gt;&lt;pre style="background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 12px"&gt; 30:     }&lt;/pre&gt;&lt;/pre&gt;
&lt;p&gt;In line 27 I made sure we disconnect from the db. Note in line 21 that I’m getting a mapper from a factory. This is an obvious requirement since we need a mechanism to map from our objects to the documents and back.&lt;/p&gt;
&lt;p&gt;In the next article we will take a look at the Mapper class for Post, save and update our first entity.&lt;/p&gt;</Content>
      <Created>2010-03-08T21:31:11.4598663-07:00</Created>
      <Modified>2010-03-08T21:35:08.0867335-07:00</Modified>
      <EntryId>01dde697-ee9d-4fd9-905e-93c2ab782ac2</EntryId>
      <Description />
      <Title>Creating a MongoDB provider for Blogengine.Net – Part 1</Title>
      <Categories>MongoDB;Programming</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>