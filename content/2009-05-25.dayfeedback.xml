<?xml version="1.0" encoding="utf-8"?>
<DayExtra xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2009-05-24T17:00:00-07:00</Date>
  <Comments>
    <Comment>
      <Content>It does work, you just have to pass in a Tuple instance as the last parameter. As any Tuple implements ITuple, the test will succeed. 

So for example: (I've replaced the angle brackets with [] so this lame blogengine doesn't go into an error state. :/ )

var param = new Tuple[int, int](1, 2);
var bigTuple = new Tuple[int, int, int, int, int, int, int, Tuple[int, int]](1, 2, 3, 4, 5, 6, 7, param);

This should work, as param is a Tuple[] and therefore implements ITuple. This way, you can create enless tuples, though it's a bit misleading, because the elements are nested into the 8th parameter. </Content>
      <Created>2009-05-25T01:38:25.8462775-07:00</Created>
      <Modified>2009-05-25T01:38:25.8462775-07:00</Modified>
      <EntryId>85b5a670-8e41-4e11-8262-66d180dd3c36</EntryId>
      <TargetTitle>Tuple, a new type on .Net 4.0</TargetTitle>
      <TargetEntryId>601B5987-9D65-477E-918D-E886533E7A2C</TargetEntryId>
      <Author>Frans Bouma</Author>
      <AuthorEmail />
      <AuthorHomepage>http://weblogs.asp.net/fbouma</AuthorHomepage>
      <AuthorIPAddress>82.93.151.115</AuthorIPAddress>
      <IsPublic>true</IsPublic>
      <SpamState>NotChecked</SpamState>
      <AuthorUserAgent>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10 (.NET CLR 3.5.30729)</AuthorUserAgent>
    </Comment>
    <Comment>
      <Content>@Frans: Hi Frans, thanks for comment. I should have been more clear, the problem is not that you can't create endless Tuple but that the error happens at runtime. You have no indication that you are making an illegal assigment until you run it. Of course if you do TDD or any type of test first (or test at all) you will catch it sooner ruther than later. I just expect some users to get confused. Also naming the last Type as TTuple may help with usage.</Content>
      <Created>2009-05-25T04:04:08.0752794-07:00</Created>
      <Modified>2009-05-25T04:04:08.0752794-07:00</Modified>
      <EntryId>968aa00d-387f-486a-bd6f-7a8859f664dc</EntryId>
      <TargetTitle>Tuple, a new type on .Net 4.0</TargetTitle>
      <TargetEntryId>601B5987-9D65-477E-918D-E886533E7A2C</TargetEntryId>
      <Author>Hernan Garcia</Author>
      <AuthorEmail>hernifootball@yahoo.com</AuthorEmail>
      <AuthorHomepage>http://blog.dynamicprogrammer.com</AuthorHomepage>
      <AuthorIPAddress>99.231.75.201</AuthorIPAddress>
      <IsPublic>true</IsPublic>
      <SpamState>NotChecked</SpamState>
      <AuthorUserAgent>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10 (.NET CLR 4.0.20506)</AuthorUserAgent>
    </Comment>
    <Comment>
      <Content>There is a simple solution for the ITuple problem - make it an abstract base class with an internal constructor - then it wouldn't be possible to subclass it from outside the assembly

public abstract class TupleBase { // maybe even call it simply Tuple with no generic arguments
    internal TupleBase() { }
    public abstract int Size { get; }
}

public class Tuple[T1,T2] : TupleBase {
    public Tuple(T1 item1, T2 item2) {
        this.Item1 = item1;
        this.Item2 = item2;
    }

    public T1 Item1 { get; private set; }
    public T2 Item2 { get; private set; }

    public override int Size { get { return 2; } }
}

...

public class Tuple[T1,T2,T3,T4,T5,T6,T7,TRest] : TupleBase where TRest : TupleBase {
    public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) {
        this.Item1 = item1;
        this.Item2 = item2;
        this.Item3 = item3;
        this.Item4 = item4;
        this.Item5 = item5;
        this.Item6 = item6;
        this.Item7 = item7;
        this.Rest = rest;
    }

    public T1 Item1 { get; private set; }
    public T2 Item2 { get; private set; }
    public T3 Item3 { get; private set; }
    public T4 Item4 { get; private set; }
    public T5 Item5 { get; private set; }
    public T6 Item6 { get; private set; }
    public T7 Item7 { get; private set; }
    public TRest Rest { get; private set; }

    public override int Size { get { return 7 + Rest.Size; } }
}</Content>
      <Created>2009-05-27T11:23:06.9723845-07:00</Created>
      <Modified>2009-05-27T11:23:06.9723845-07:00</Modified>
      <EntryId>aa8e3bc1-7bd6-40c7-aff4-36a9f1bc61c5</EntryId>
      <TargetTitle>Tuple, a new type on .Net 4.0</TargetTitle>
      <TargetEntryId>601B5987-9D65-477E-918D-E886533E7A2C</TargetEntryId>
      <Author>configurator</Author>
      <AuthorEmail>configurator@gmail.com</AuthorEmail>
      <AuthorHomepage>http://blog.tapuchim.com/</AuthorHomepage>
      <AuthorIPAddress>88.177.242.61</AuthorIPAddress>
      <IsPublic>true</IsPublic>
      <SpamState>NotChecked</SpamState>
      <AuthorUserAgent>Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.65 Safari/525.19</AuthorUserAgent>
    </Comment>

  <Trackings />
</DayExtra>