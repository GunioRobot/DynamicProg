<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2007-12-22T17:00:00-07:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;I have been reading a lot about how this framework will better be used in brand new developments. I agree that you won't migrate an existing site to this framework if the existing site is working, but I'm worry that we are missing another opportunity to use this framework and that is leverage existing models an business logic.&lt;/p&gt;&lt;p&gt;Most examples keep using LINQ TO SQL to generate the model from scratch and that may give the false impression that you need to generate the model that way.&lt;br&gt;I will show how to use an existing model with the MVC, in this case a DooDads DAL.&lt;/p&gt;&lt;p&gt;Notice that the only difference between this and my last post is that the project doesn't have any files under the model folder, I'm actually using those files to create the dll for the DAL.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="content/binary/SP32-20071223-144417.png" height="206" width="179"&gt;&lt;/p&gt;&lt;p&gt;I just added&amp;nbsp; a reference to the classes that I need to consume my model from.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="content/binary/SP32-20071223-144518.png" height="82" width="222"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;At this point all the controller classes will have access to my model.&lt;/p&gt;&lt;pre lang="csharp"&gt;using System;&lt;br&gt;using System.Web;&lt;br&gt;using System.Web.Mvc;&lt;br&gt;using LaTrompa.Dal;&lt;br&gt;using MyGeneration.dOOdads;&lt;br&gt;&lt;br&gt;namespace MvcDemo2.Controllers&lt;br&gt;{&lt;br&gt;    public class MovieController : Controller&lt;br&gt;    {&lt;br&gt;&lt;br&gt;        [ControllerAction]&lt;br&gt;        public void List()&lt;br&gt;        {&lt;br&gt;            Movies movieList = new Movies();&lt;br&gt;            movieList.LoadAll();&lt;br&gt;            MovieViewData customViewData = new MovieViewData();&lt;br&gt;            customViewData.MovieList = movieList;&lt;br&gt;            RenderView("List", customViewData);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public class MovieViewData&lt;br&gt;    {&lt;br&gt;        public Movies MovieList { get; set; }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;I think that this is a really cool application for the MVC framework, imagine how fast you can implement a web front end leveraging existing Model and Business objects, maybe used by a desktop app.&lt;/p&gt;&lt;p&gt;And further on, this objects don't even need to connect to a MSSQL database, they can point to whatever db your layer support.&lt;/p&gt;</Content>
      <Created>2007-12-23T12:50:21-07:00</Created>
      <Modified>2008-12-14T22:31:35.5729985-07:00</Modified>
      <EntryId>17</EntryId>
      <Description />
      <Title>Using an existing Model with the ASP.MVC framework</Title>
      <Categories>Frameworks;Patterns;Programming</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;I have been using &lt;a target="_blank" href="http://www.mygenerationsoftware.com/portal/dOOdads/Overview/tabid/63/Default.aspx"&gt;DooDads&lt;/a&gt;, a free, open source ORM architecture for a while now. I like that I can easily use it with any database structure, not matter how bad is it.&lt;/p&gt;&lt;p&gt;When I come across such designs DooDads is the tool that allows me to create a layer of abstraction pretty fast into the application, that will later on allow me to make changes and refactor the database with minimal impact in the upper layers.&lt;/p&gt;&lt;p&gt;I'm also a sucker for the MVC pattern and I downloaded as soon as was avalable, I have been playing around with it and one of the things I wanted to do was test it's extensibility using my favorite ORM tool.&lt;/p&gt;&lt;h3&gt;Setting things up.&lt;/h3&gt;&lt;p&gt;So I fired up VS and create a new MVC application.&lt;/p&gt;&lt;p&gt;I create a db with one table and I call it Movies.&lt;/p&gt;&lt;p&gt;I open &lt;a target="_blank" href="http://www.mygenerationsoftware.com/portal/default.aspx"&gt;MyGeneration&lt;/a&gt; and generate the code for the business entity for the table and the Stored Procedures that the object will use.&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20071223-015910%281%29.png" alt="" height="287" width="320"&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="DooDads Stored Procedures" src="content/binary/SP32-20071223-015926.png" height="149" width="338"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h3&gt;The Model.&lt;/h3&gt;&lt;p&gt;Then I added the code into the Model folder in the solution opened in Visual Studio 2008 and create the concrete class for the Movie object, Doodads generated code use abstract classes.&lt;/p&gt;&lt;p&gt;&lt;img alt="Model classes in the MVC project" src="content/binary/SP32-20071223-020248.png" height="313" width="280"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;I like to separated the generated code from my implementation using two different folders but you don't need to do so if you don't want. I think that is easier to maintain this way.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;My next step was to modify the menu to create a Movies item, so I opened the master page and added the following line.&lt;/p&gt;&lt;pre lang="csharp"&gt;&amp;lt;ul&amp;gt;&lt;br&gt;   &amp;lt;li&amp;gt;&amp;lt;a runat="server" href="~/"&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br&gt;   &amp;lt;li&amp;gt;&amp;lt;%= Html.ActionLink("Movies", "List", "Movie") %&amp;gt;&amp;lt;/li&amp;gt;&lt;br&gt;   &amp;lt;li&amp;gt;&amp;lt;%= Html.ActionLink("About Us", "About", "Home") %&amp;gt;&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;/ul&amp;gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;You will need to add the connection string as and appSetting in the web.config for Doodads to pick it up. The key should be dbConnection.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;pre lang="xml"&gt;&amp;lt;appsettings&amp;gt;&lt;br&gt;    &amp;lt;add value="Data Source=SERVERNAME;Initial Catalog=DATABASE;Integrated Security=True" key="dbConnection"&amp;gt;&amp;lt;/add&amp;gt;&lt;br&gt;  &amp;lt;/appsettings&amp;gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h3&gt;The Controller.&lt;/h3&gt;&lt;p&gt;Them I added a reference to MyGeneration.Doodads.dll and them create a new Controller class named MovieController&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="content/binary/SP32-20071223-022349.png" height="341" width="252"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The code for this class is very simple. I added the using statement for the namespace of my Model classes and I create a custom ViewData object using the new simpler properties. Declaring the type of the property will give me a strongly typed ViewData in the View.&lt;/p&gt;&lt;pre lang="csharp"&gt;using System;&lt;br&gt;using System.Web;&lt;br&gt;using System.Web.Mvc;&lt;br&gt;&lt;span class="Code"&gt;using LaTrompa.Dal;&lt;/span&gt;&lt;br&gt;&lt;br&gt;namespace MvcApplication1.Controllers&lt;br&gt;{&lt;br&gt;    public class MovieController : Controller&lt;br&gt;    {&lt;br&gt;        [ControllerAction]&lt;br&gt;        public void List()&lt;br&gt;        {&lt;br&gt;            Movies movieSelection = new Movies();&lt;br&gt;            movieSelection.LoadAll();&lt;br&gt;            MoviesViewData customViewData = new MoviesViewData();&lt;br&gt;            customViewData.MovieList = movieSelection;&lt;br&gt;&lt;br&gt;            RenderView("Movie", &lt;span class="Code"&gt;customViewData&lt;/span&gt;);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    &lt;span class="Code"&gt;public class MoviesViewData&lt;br&gt;    {&lt;br&gt;        public Movies MovieList { get; set; }&lt;br&gt;    }&lt;/span&gt;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h3&gt;The View.&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;I created a folder called Movie under View and inside a Movie page (I made this page of the MVC Content page type to use the same master page).&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20071223-023153.png" alt="" height="112" width="215"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20071223-023202.png" alt="" height="91" width="218"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;I added a using for the controllers namespace and set the type of the ViewPage&amp;lt;T&amp;gt; object to my custom viewdata object.&lt;/p&gt;&lt;pre lang="csharp"&gt;using System;&lt;br&gt;using System.Web;&lt;br&gt;using System.Web.Mvc;&lt;br&gt;using MvcApplication1.Controllers;&lt;br&gt;&lt;br&gt;namespace MvcApplication1.Views.Home&lt;br&gt;{&lt;br&gt;    public partial class Movies : ViewPage&amp;lt;moviesviewdata&amp;gt;&lt;br&gt;    {&lt;br&gt;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;&amp;nbsp;I them opened the aspx page and added the following.&lt;/p&gt;&lt;pre lang="csharp"&gt;&amp;lt;%while (!ViewData.MovieList.EOF)&lt;br&gt;{&lt;br&gt;%&amp;gt;&lt;br&gt;    &amp;lt;h2&amp;gt;&amp;lt;%= ViewData.MovieList.Title%&amp;gt;&amp;lt;/h2&amp;gt;&lt;br&gt;    &amp;lt;p&amp;gt;&amp;lt;%=ViewData.MovieList.Description%&amp;gt;&amp;lt;/p&amp;gt;&lt;br&gt;    &amp;lt;%= Html.ActionLink(ViewData.MovieList.Category, "List", "Category")%&amp;gt;&lt;br&gt;&amp;lt;%     &lt;br&gt;ViewData.MovieList.MoveNext();&lt;br&gt;}&lt;br&gt;%&amp;gt;&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;And that is all you need, in a future article I will consume the Model as a precompiled assembly and I will demostrate how to use a webservice as a model.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20071223-023852.png" alt="" height="451" width="426"&gt;&lt;/p&gt;</Content>
      <Created>2007-12-23T00:44:41-07:00</Created>
      <Modified>2008-12-14T22:32:00.6904475-07:00</Modified>
      <EntryId>16</EntryId>
      <Description />
      <Title>Using Microsoft ASP.NET MVC with DooDads</Title>
      <Categories>Frameworks;Patterns;Programming</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>