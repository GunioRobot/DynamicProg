<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2009-01-21T17:00:00-07:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;You can find this new ORM framework at &lt;a href="http://code.msdn.microsoft.com/XGENOORM"&gt;http://code.msdn.microsoft.com/XGENOORM&lt;/a&gt;. Starting with it is fairly easy. Just add a reference on your project to the very small (32K) dll (only one!) and you can start playing with it.&lt;/p&gt;  &lt;h3&gt;First impressions.&lt;/h3&gt;  &lt;p&gt;My observations come from reading the documentation and not from using it. What I like. It uses the &lt;a href="http://martinfowler.com/eaaCatalog/activeRecord.html"&gt;ActiveRecord pattern&lt;/a&gt; what I like personally prefer for simple applications.     &lt;br /&gt;Since this claim to be a simple ORM this is acceptable. You should understand that this mean that your objects need to inherit from a base class that provides the CRUD operations. If you want to use just POCO’s without dependencies on your ORM this won’t be a good choice. This is an issue with the pattern though and not this particular ORM.&lt;/p&gt;  &lt;p&gt;Mapping is done using Attributes&lt;/p&gt;  &lt;p&gt;For Example if you create a new class Dog and you want to mapped into a table Animal you do this&lt;/p&gt;  &lt;pre class="c#:collapse" name="code"&gt;[Table(Name = “Animal”]&lt;br /&gt;public class Dog&lt;br /&gt;{&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; [Column(Name = &amp;quot;Id&amp;quot;)]&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; public int Id {get; set;}&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; [Column(Name = &amp;quot;Name&amp;quot;)]&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; public string Name {get; set;}&lt;br /&gt;}&lt;/pre&gt;

&lt;p&gt;One of the problems I found from my liked is the querying capabilities, no the lack of but the way they are implementing. You pass a Condition object to the Find method, but this object make use of strings, what it’s ugly and doesn’t work well with Refactoring tools like ReSharper. 
  &lt;br /&gt;If we want to find all dogs where the name starts with A we will do something like this.&lt;/p&gt;

&lt;pre class="c#:collapse" name="code"&gt;var condition = New Condition(&amp;quot;Name&amp;quot;, &amp;quot;like&amp;quot;, &amp;quot;A%&amp;quot;);&lt;/pre&gt;

&lt;p&gt;Not only is using strings for the Column name but also for the operand of the condition. I would prefer a different notation, something like this: &lt;/p&gt;

&lt;pre class="c#:collapse" name="code"&gt;var condition = New Condition&amp;lt;Dog&amp;gt;(d=&amp;gt;d.Name, Operand.Like, &amp;quot;A%&amp;quot;);&lt;/pre&gt;

&lt;p&gt;At this point relationships are not supported they are promising this for the next release.&lt;/p&gt;

&lt;p&gt;A nice feature is the Audit Attributes, this Attributes are used to mark some properties of your object to save data as modification dates, creation dates and user that changed the objects. All this is done automatically for you, what it’s a very nice idea.&lt;/p&gt;

&lt;p&gt;In conclusion if you need something extremely simple and you don’t care about the relationships you may be able to use it. If you need something more mature using the same pattern I will stick with &lt;a href="http://www.castleproject.org/activerecord/index.html"&gt;Castle ActiveRecord&lt;/a&gt; at this moment.&lt;/p&gt;

&lt;p&gt;As a side note this doesn’t seem to be open source, so there may not be any support from the community, an strength of the Castle project&lt;/p&gt;</Content>
      <Created>2009-01-22T05:38:15.7513028-07:00</Created>
      <Modified>2009-01-22T05:38:15.7513028-07:00</Modified>
      <EntryId>7a97d9a3-9d88-4518-ab98-a5ab2875c6d6</EntryId>
      <Description />
      <Title>XGENO.ORG new lightweight ORM Mapper.</Title>
      <Categories>Patterns;Programming;Tools</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>