<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2008-01-04T17:00:00-07:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;&lt;span class="Code"&gt;UPDATE: Thanks to Peter I modify where the string[] is declared and changed an obvious mistake instead of string s = ""; I use the correct form of string s = string.Empty;, I can't believe I miss that one, I really annoy me team with that line :-)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I have found some controversy in post demostrating how to extend the string object. Sometimes the controversy is around the examples presented. So I decided to make my own example with methods that I wish were included in the framework.&lt;/p&gt;&lt;p&gt;String has two very useful methods ToUpper() and ToLower(), but I found myself looking for a good ToCamel(), ToPascal(), Capitalize() and CapitalizeAll() methods one too many times.&lt;/p&gt;&lt;h4&gt;Let's write down what we want to acomplish.&lt;/h4&gt;&lt;p&gt;&lt;table style="width: 100%;" border="0" cellpadding="1" cellspacing="1"&gt;    &lt;tbody&gt;        &lt;tr&gt;            &lt;td&gt;            &lt;p&gt;Method&lt;/p&gt;            &lt;/td&gt;            &lt;td&gt;Definition&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;ToCamel()&lt;/td&gt;            &lt;td&gt;Given a set of words separated by a space or an underscore return a lower Camel cased word. ex: Hernan Garcia -&amp;gt; hernanGarcia&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;ToPascal()&lt;/td&gt;            &lt;td&gt;Like ToCamel but all words start with an uppercase&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;Capitalize()&lt;/td&gt;            &lt;td&gt;Given a word or a phrase make the first letter of the phrase and the first letter after a point Upper case and all the rest lower case.&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;CapitalizeAll()&lt;/td&gt;            &lt;td&gt;Like Capitalize but all words start with an uppercase letter.&lt;/td&gt;        &lt;/tr&gt;    &lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;&lt;h4&gt;&amp;nbsp;ToCamel()&lt;/h4&gt;&lt;p&gt;The implementation is super simple.&lt;/p&gt;&lt;pre lang="csharp"&gt;public static string ToCamel(this string value)&lt;br&gt;        {&lt;br&gt;            var s = value;&lt;br&gt;            s = s.Trim().ToLower();&lt;br&gt;            &lt;br&gt;            if (s.Length == 0)&lt;br&gt;            {&lt;br&gt;                return value;&lt;br&gt;            }&lt;/pre&gt;&lt;pre lang="csharp"&gt;string[] ar = null;&lt;br&gt;&lt;br&gt;            if (s.IndexOf('_') &amp;gt; -1)&lt;br&gt;            {&lt;br&gt;                ar = s.Split('_');&lt;br&gt;            }&lt;br&gt;            else if (s.IndexOf(' ') &amp;gt; -1)&lt;br&gt;            {&lt;br&gt;                ar = s.Split(' ');&lt;br&gt;            }&lt;br&gt;&lt;br&gt;            if (ar != null)&lt;br&gt;            {&lt;br&gt;                for (int i = 0; i &amp;lt; ar.Length; i++)&lt;br&gt;                {&lt;br&gt;                    if (ar[i].Trim().Length &amp;gt; 0)&lt;br&gt;                    {&lt;br&gt;                        if (i == 0)&lt;br&gt;                        {&lt;br&gt;                            s = ar[i];&lt;br&gt;                        }&lt;br&gt;                        else&lt;br&gt;                        {&lt;br&gt;                            s += ar[i].Substring(0, 1).ToUpper() + ar[i].Substring(1);&lt;br&gt;                        }&lt;br&gt;                    }&lt;br&gt;                }&lt;br&gt;                return s;&lt;br&gt;            }&lt;br&gt;            return value;&lt;br&gt;        }&lt;/pre&gt;&lt;p&gt;An example of usage:&lt;/p&gt;&lt;pre lang="csharp"&gt;static void Main(string[] args)&lt;br&gt;        {&lt;br&gt;            Console.WriteLine("this is going to be something".ToCamel());&lt;br&gt;            Console.WriteLine("hernan_garcia".ToCamel());&lt;br&gt;            Console.WriteLine("Hernan  Garcia".ToCamel());&lt;br&gt;            Console.WriteLine("HernanGarcia".ToCamel());&lt;br&gt;        }&lt;/pre&gt;&lt;p&gt;&amp;nbsp;The result:&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20080105-000550.png" alt="" class="" height="127" width="270"&gt;&lt;/p&gt;&lt;h4&gt;ToPascal()&lt;/h4&gt;&lt;pre lang="csharp"&gt;public static string ToPascal(this string value)&lt;br&gt;        {&lt;br&gt;            var s = value;&lt;br&gt;            s = s.Trim().ToLower();&lt;br&gt;            &lt;br&gt;            if (s.Length == 0)&lt;br&gt;            {&lt;br&gt;                return value;&lt;br&gt;            }&lt;br&gt;            string[] ar = null;&lt;br&gt;&lt;br&gt;            if (s.IndexOf('_') &amp;gt; -1)&lt;br&gt;            {&lt;br&gt;                ar = s.Split('_');&lt;br&gt;            }&lt;br&gt;            else if (s.IndexOf(' ') &amp;gt; -1)&lt;br&gt;            {&lt;br&gt;                ar = s.Split(' ');&lt;br&gt;            }&lt;br&gt;            s = string.Empty;&lt;br&gt;            if (ar != null)&lt;br&gt;            {&lt;br&gt;                for (int i = 0; i &amp;lt; ar.Length; i++)&lt;br&gt;                {&lt;br&gt;                    if (ar[i].Trim().Length &amp;gt; 0)&lt;br&gt;                    {&lt;br&gt;                        s += ar[i].Substring(0, 1).ToUpper() + ar[i].Substring(1);&lt;br&gt;                    }&lt;br&gt;                }&lt;br&gt;                return s;&lt;br&gt;            }&lt;br&gt;            return value;&lt;br&gt;        }&lt;/pre&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;pre lang="csharp"&gt;Console.WriteLine("this is going to be something".ToPascal());&lt;br&gt;            Console.WriteLine("hernan_garcia".ToPascal());&lt;br&gt;            Console.WriteLine("Hernan  Garcia".ToPascal());&lt;br&gt;            Console.WriteLine("HernanGarcia".ToPascal());&lt;/pre&gt;&lt;p&gt;The result:&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20080105-003049.png" alt="" class="" height="95" width="242"&gt;&lt;/p&gt;&lt;h4&gt;Capitalize()&lt;/h4&gt;&lt;p&gt;The code&lt;/p&gt;&lt;pre lang="csharp"&gt;public static string Capitalize(this string value)&lt;br&gt;        {&lt;br&gt;            var s = value;&lt;br&gt;            s = s.Trim().ToLower();&lt;br&gt;            &lt;br&gt;            if (s.Length == 0)&lt;br&gt;            {&lt;br&gt;                return value;&lt;br&gt;            }&lt;br&gt;&lt;br&gt;            string[] ar = s.Split('.');&lt;br&gt;&lt;br&gt;            s = string.Empty;&lt;br&gt;            if (ar != null)&lt;br&gt;            {&lt;br&gt;                for (int i = 0; i &amp;lt; ar.Length; i++)&lt;br&gt;                {&lt;br&gt;                    if (ar[i].Trim().Length &amp;gt; 0)&lt;br&gt;                    {&lt;br&gt;                        s += ar[i].Trim().Substring(0, 1).ToUpper() + ar[i].Trim().Substring(1) + ". ";&lt;br&gt;                    }&lt;br&gt;                }&lt;br&gt;                return s;&lt;br&gt;            }&lt;br&gt;            return value;&lt;br&gt;        }&lt;/pre&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;pre lang="csharp"&gt;Console.WriteLine("this is going to be something".Capitalize());&lt;br&gt;            Console.WriteLine("nothing To Look AT HERE.".Capitalize());&lt;br&gt;            Console.WriteLine("this is going to be something. nothing To Look AT HERE.".Capitalize());&lt;br&gt;            Console.WriteLine("hernan_garcia".Capitalize());&lt;br&gt;            Console.WriteLine("Hernan  Garcia".Capitalize());&lt;br&gt;            Console.WriteLine("Hernan garcia".Capitalize());&lt;/pre&gt;&lt;p&gt;The result:&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20080105-004245.png" alt="" class="" height="139" width="445"&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h4&gt;CapitalizeAll()&lt;/h4&gt;&lt;p&gt;The code:&lt;/p&gt;&lt;pre lang="csharp"&gt;public static string CapitalizeAll(this string value)&lt;br&gt;        {&lt;br&gt;            var s = value;&lt;br&gt;            s = s.Trim().ToLower();&lt;br&gt;            &lt;br&gt;            if (s.Length == 0)&lt;br&gt;            {&lt;br&gt;                return value;&lt;br&gt;            }&lt;br&gt;&lt;br&gt;            string[] ar = s.Split(' ');&lt;br&gt;           &lt;br&gt;            s = string.Empty;&lt;br&gt;            if (ar != null)&lt;br&gt;            {&lt;br&gt;                for (int i = 0; i &amp;lt; ar.Length; i++)&lt;br&gt;                {&lt;br&gt;                    if (ar[i].Trim().Length &amp;gt; 0)&lt;br&gt;                    {&lt;br&gt;                        s += ar[i].Trim().Substring(0, 1).ToUpper() + ar[i].Trim().Substring(1) + " ";&lt;br&gt;                    }&lt;br&gt;                }&lt;br&gt;                return s;&lt;br&gt;            }&lt;br&gt;            return value;&lt;br&gt;        }&lt;/pre&gt;&lt;p&gt;Example:&lt;/p&gt;&lt;pre lang="csharp"&gt;Console.WriteLine("this is going to be something".CapitalizeAll());&lt;br&gt;            Console.WriteLine("hernan_garcia".CapitalizeAll());&lt;br&gt;            Console.WriteLine("Hernan  Garcia".CapitalizeAll());&lt;br&gt;            Console.WriteLine("Hernan garcia".CapitalizeAll());&lt;/pre&gt;&lt;p&gt;The result:&lt;/p&gt;&lt;p&gt;&lt;img src="content/binary/SP32-20080105-003624%281%29.png" alt="" class="" height="101" width="327"&gt;&lt;/p&gt;&lt;p&gt;There are some other methods in this same line that we can create, for example a method to convert back from Pascal or Camel into a space or underscore separate string.&lt;/p&gt;</Content>
      <Created>2008-01-04T22:46:02-07:00</Created>
      <Modified>2008-12-14T22:35:15.4364822-07:00</Modified>
      <EntryId>31</EntryId>
      <Description />
      <Title>Extending the string object in c#</Title>
      <Categories>Programming</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
    <Entry>
      <Content>&lt;p&gt;I usually use &lt;a href="http://www.pspad.com/en/"&gt;PSPad&lt;/a&gt; as my fire up and hack something together editor. I also use it to do a lot of maintenance, I have been even using it to do some c# editing here and there and relying more and more in &lt;a href="http://nant.sourceforge.net/"&gt;Nant&lt;/a&gt; to do the builds, it even has a plug-in to synchronize with subversion if you want.&lt;/p&gt;&lt;p&gt;When I need something a little bit more powerful I jump to use &lt;a href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; and the myriad of extensions that make this my favorite IDE.&lt;/p&gt;&lt;p&gt;I used to renegade from IDE's but I never was able to completely get rid of them, the reality is that in a lot of cases make development easier, faster and allow the developer to concentrate in some productive task instead of trying to remember the exact casing or syntax to any given language. Of course, as a developer using Microsoft technologies I have been using VS since version 5.0, specially for Visual Basic. The only two things I hate from the line was Interdev in the pre-net era and the first version of VS.NET, It was so buggy. VS 2003 was a lot better even when it has some strange behaviors, specially when dealing with html files in edit mode, controls the mysteriously disappear and the odd generated code. VS 2005 and the new 2008 are a lot better and I find them really good to work with.&lt;/p&gt;&lt;p&gt;I keep installed in my development machines a copy of &lt;a href="http://achinth.com/files/folders/downloads/entry24.aspx"&gt;Editor4Nant&lt;/a&gt; even when I'm not using it a lot lately I find it a little too constraining. It's helpful while you are learning your way around Nant though.&lt;/p&gt;&lt;p&gt;To edit Javascript I found the new support presented by VS 2008 really good, but when I need to do some heavy AJAX stuff I use the Eclipse based &lt;a href="http://www.aptana.com/"&gt;Aptana IDE&lt;/a&gt;, their support for auto completion and documentation is incredible.&lt;/p&gt;&lt;p&gt;On the pure text editors front I have used &lt;a href="http://www.crimsoneditor.com/"&gt;Crimson&lt;/a&gt; and still use &lt;a href="http://www.editpadpro.com/editpadlite.html"&gt;EditPad Lite&lt;/a&gt; and &lt;a href="http://www.editplus.com/"&gt;EditPlus&lt;/a&gt;, specially powerful when you need to do some text based manipulation. About that, you need &lt;a href="http://www.weitz.de/regex-coach/"&gt;The RegEx coach&lt;/a&gt; in your machine, to test your regular expressions.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.bradsoft.com/topstyle/tslite/index.asp"&gt;Top Style&lt;/a&gt; used to be my choice when dealing with css but again Aptana have capture my heart in that area.&lt;/p&gt;&lt;!--dotnetkickit--&gt;</Content>
      <Created>2008-01-04T21:33:23-07:00</Created>
      <Modified>2008-12-14T22:26:01.9009493-07:00</Modified>
      <EntryId>30</EntryId>
      <Description />
      <Title>PSPad, editors and other tools that I can't leave without.</Title>
      <Categories>Tools</Categories>
      <Author>hgarcia</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>